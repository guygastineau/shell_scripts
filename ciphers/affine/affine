#!/bin/bash

process () {      #main encoding and decoding process

  input="${2,,}"; input="${input//[[:blank:][:punct:]]/}"

  case "$1" in

    encode)
      echo "$input" | tr 'a-z' "$cypherbet" | fold -w5 | paste -sd' '
      ;;
    decode)
      echo "$input" | tr "$cypherbet" 'a-z'
      ;;

  esac

}

coprime_check () {      #check coprimality of a and m

  check=$((a % 2))      #make sure it isn't even

  if [ "$check" -ne 0 ]; then  #check for odd factors greater than 1
    for (( factor=3; factor<="$a"; factor+=2 )); do
      if [[ $((a % factor)) -eq 0 && $((26 % factor)) -eq 0 ]]; then
        echo "Error: a and m must be coprime." && exit 1 
      fi
    done     #wish I could find a cleaner solution for this function
  else
    echo "Error: a and m must be coprime." && exit 1
  fi

}

a="$2"; b="$3"                     #set a and b for the key

for letter in {a..z}; do           #generate the alphabet map
  alphabet+=("$letter")
done

for i in "${!alphabet[@]}"; do     #generate encoded pair for 'tr'
  index=$((a * i + b))             #E(x) = (ax + b) mod m
  index=$((index % 26))
  cypherbet+="${alphabet[$index]}" #here's our encoded alphabet
done

coprime_check

if [ -p /dev/stdin ]; then         #let's read from pipe
  while IFS= read -r line; do      #don't let IFS break up single lines
    process "$1" "$line"           #in case the pipe is a cated file
  done
elif [ -f "./$4" ]; then           #let's read from file as argument
  while IFS= read -r line; do
    process "$1" "$line"
  done < "$4"
else
  process "$1" "$4"                #just a string as an argument
fi

exit 0
